{
  "extends": [
    "airbnb-base",
    "next/core-web-vitals",
    "plugin:prettier/recommended"
  ],
  "rules": {
    "prettier/prettier": [
      "error",
      {
        "singleQuote": false,
        "endOfLine": "auto",
        "semi": true
      }
    ]
  },
  "settings": {
    "tailwindcss": {
      "callees": ["classnames", "clsx", "ctl", "cva", "tv", "cn"]
    }
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx", "**/*.mts"],
      "plugins": [
        "@typescript-eslint",
        "unused-imports",
        "tailwindcss",
        "simple-import-sort"
      ],
      "extends": [
        "plugin:tailwindcss/recommended",
        "airbnb",
        "airbnb-typescript",
        "next/core-web-vitals",
        "plugin:prettier/recommended"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "singleQuote": false,
            "endOfLine": "auto",
            "semi": true,
            "trailingComma": "es5"
          }
        ],
        "tailwindcss/no-custom-classname": ["off"], // Allow custom class names (not restricted to Tailwind)
        "import/no-extraneous-dependencies": "warn", // Warn about extraneous dependencies in TypeScript files
        "no-param-reassign": "off", // Allow parameter reassignment
        "consistent-return": "off", // Disable consistent return requirement
        "no-empty-pattern": "off", // Allow empty destructuring patterns
        "no-use-before-define": "off", // Disable "use before define" for all variables and functions
        "no-shadow": "off", // Disable shadowed variable rule
        "@typescript-eslint/no-shadow": "off", // Disable shadowed variable rule for TypeScript
        "@typescript-eslint/no-use-before-define": "off", // Disable "use before define" for TypeScript
        "react/jsx-no-constructed-context-values": "off", // Allow constructed context values in React
        "import/extensions": "off", // Disable import extensions requirement (TypeScript handles this)
        "react/function-component-definition": "off", // Allow different ways to define function components
        "react/destructuring-assignment": "off", // Disable mandatory destructuring in React components
        "react/require-default-props": "off", // Allow non-defined props to be undefined
        "react/jsx-props-no-spreading": "off", // Allow prop spreading in JSX (e.g., in _app.tsx or react-hook-form)
        "react/no-unstable-nested-components": "off", // Allow unstable nested components (needed by i18n library)
        "@typescript-eslint/comma-dangle": "off", // Disable ESLint comma-dangle rule to avoid conflict with Prettier
        "@typescript-eslint/consistent-type-imports": "error", // Enforce consistent usage of `import type`
        "no-restricted-syntax": [
          "error",
          "ForInStatement",
          "LabeledStatement",
          "WithStatement"
        ],
        "import/prefer-default-export": "off",
        "simple-import-sort/imports": "error",
        "simple-import-sort/exports": "error",
        "import/order": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "unused-imports/no-unused-imports": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/naming-convention": "off",
        "unused-imports/no-unused-vars": [
          "warn",
          {
            "vars": "all",
            "varsIgnorePattern": "^_",
            "args": "after-used",
            "argsIgnorePattern": "^_"
          }
        ],
        "jsx-a11y/label-has-associated-control": "off",
        "jsx-a11y/label-has-for": ["error", {
          "required": {
            "some": ["nesting", "id"]
          }
        }],
        "jsx-a11y/anchor-is-valid": "off"
      }
    }
  ]
}
